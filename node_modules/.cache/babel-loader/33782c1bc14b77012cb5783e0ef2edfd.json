{"ast":null,"code":"var _jsxFileName = \"/home/amit/own project/weather-report/src/LiveData.js\";\nimport React, { Fragment, Component } from \"react\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nam4core.useTheme(am4themes_animated);\n\nclass LiveData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  renderChart() {\n    let chart = am4core.create(\"LiveData\", am4charts.XYChart);\n    chart.hiddenState.properties.opacity = 0; // this creates initial fade-in\n\n    let data = [];\n    let open = 100;\n    let close = 250;\n\n    for (var i = 1; i < 120; i++) {\n      open += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 4);\n      close = Math.round(open + Math.random() * 5 + i / 5 - (Math.random() < 0.5 ? 1 : -1) * Math.random() * 2);\n      data.push({\n        date: new Date(2018, 0, i),\n        open: open,\n        close: close\n      });\n    }\n\n    chart.data = data;\n    let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n    let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n    valueAxis.tooltip.disabled = true;\n    let series = chart.series.push(new am4charts.LineSeries());\n    series.dataFields.dateX = \"date\";\n    series.dataFields.openValueY = \"open\";\n    series.dataFields.valueY = \"close\";\n    series.tooltipText = \"open: {openValueY.value} close: {valueY.value}\";\n    series.sequencedInterpolation = true;\n    series.fillOpacity = 0.3;\n    series.defaultState.transitionDuration = 1000;\n    series.tensionX = 0.8;\n    let series2 = chart.series.push(new am4charts.LineSeries());\n    series2.dataFields.dateX = \"date\";\n    series2.dataFields.valueY = \"open\";\n    series2.sequencedInterpolation = true;\n    series2.defaultState.transitionDuration = 1500;\n    series2.stroke = chart.colors.getIndex(6);\n    series2.tensionX = 0.8;\n    chart.cursor = new am4charts.XYCursor();\n    chart.cursor.xAxis = dateAxis;\n    chart.scrollbarX = new am4core.Scrollbar();\n  }\n\n  componentDidMount() {\n    this.renderChart(this.props);\n  }\n\n  render() {\n    const {\n      chartId\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"LiveData\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default LiveData;","map":{"version":3,"sources":["/home/amit/own project/weather-report/src/LiveData.js"],"names":["React","Fragment","Component","am4core","am4charts","am4themes_animated","useTheme","LiveData","constructor","props","state","renderChart","chart","create","XYChart","hiddenState","properties","opacity","data","open","close","i","Math","round","random","push","date","Date","dateAxis","xAxes","DateAxis","valueAxis","yAxes","ValueAxis","tooltip","disabled","series","LineSeries","dataFields","dateX","openValueY","valueY","tooltipText","sequencedInterpolation","fillOpacity","defaultState","transitionDuration","tensionX","series2","stroke","colors","getIndex","cursor","XYCursor","xAxis","scrollbarX","Scrollbar","componentDidMount","render","chartId"],"mappings":"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","sourcesContent":["import React, { Fragment, Component } from \"react\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\nam4core.useTheme(am4themes_animated);\n\nclass LiveData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    };\n\n  }\n  renderChart(){\n\n    let chart = am4core.create(\"LiveData\", am4charts.XYChart);\n    chart.hiddenState.properties.opacity = 0; // this creates initial fade-in\n    \n    let data = [];\n    let open = 100;\n    let close = 250;\n    \n    for (var i = 1; i < 120; i++) {\n      open += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 4);\n      close = Math.round(open + Math.random() * 5 + i / 5 - (Math.random() < 0.5 ? 1 : -1) * Math.random() * 2);\n      data.push({ date: new Date(2018, 0, i), open: open, close: close });\n    }\n    \n    chart.data = data;\n    \n    let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n    \n    let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n    valueAxis.tooltip.disabled = true;\n    \n    let series = chart.series.push(new am4charts.LineSeries());\n    series.dataFields.dateX = \"date\";\n    series.dataFields.openValueY = \"open\";\n    series.dataFields.valueY = \"close\";\n    series.tooltipText = \"open: {openValueY.value} close: {valueY.value}\";\n    series.sequencedInterpolation = true;\n    series.fillOpacity = 0.3;\n    series.defaultState.transitionDuration = 1000;\n    series.tensionX = 0.8;\n    \n    let series2 = chart.series.push(new am4charts.LineSeries());\n    series2.dataFields.dateX = \"date\";\n    series2.dataFields.valueY = \"open\";\n    series2.sequencedInterpolation = true;\n    series2.defaultState.transitionDuration = 1500;\n    series2.stroke = chart.colors.getIndex(6);\n    series2.tensionX = 0.8;\n    \n    chart.cursor = new am4charts.XYCursor();\n    chart.cursor.xAxis = dateAxis;\n    chart.scrollbarX = new am4core.Scrollbar();\n\n  }\n\n  componentDidMount() {\n    this.renderChart(this.props);\n  }\n\n\n\n  render() {\n    const { chartId } = this.props;\n    return (\n      <Fragment>\n        <div id={\"LiveData\"}></div>\n      </Fragment>\n    );\n  }\n}\n\nexport default LiveData;\n"]},"metadata":{},"sourceType":"module"}